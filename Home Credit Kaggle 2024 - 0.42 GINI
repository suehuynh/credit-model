{"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"sourceId":50160,"databundleVersionId":7921029,"sourceType":"competition"}],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":171.433037,"end_time":"2024-02-25T02:33:08.535651","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-02-25T02:30:17.102614","version":"2.5.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Home Credit Kaggle 2024 submission\n*Author : Sue Huynh\nDate : February 2024*\n\nWelcome and thank you for visiting my work on the Home Credit 2024 competition!\n\n**About the competition** - \"The goal of this competition is to determine how likely a customer is going to default on an issued loan. The main difference between the first and this competition is that now your submission will be scored with a custom metric that will take into account how well the model performs in future. A decline in performance will be penalized. The goal is to create a model that is stable and performs well in the future.\" (quoted from [Starter notebook](https://www.kaggle.com/code/jetakow/home-credit-2024-starter-notebook))\n\n**About my submission** - Inspired by the Starter Notebook, I will\n* Join tables with Polars - a DataFrame library implemented in Rust language, designed to be blazingy fast and memory efficient.\n* Create simple aggregation features\n* Train a LightGBM model","metadata":{"papermill":{"duration":0.011626,"end_time":"2024-02-25T02:30:19.979739","exception":false,"start_time":"2024-02-25T02:30:19.968113","status":"completed"},"tags":[]}},{"cell_type":"code","source":"import polars as pl\nimport polars.selectors as cs\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score \nfrom sklearn.metrics import accuracy_score\n\nimport matplotlib.pyplot as plt\n\ndataPath = \"/kaggle/input/home-credit-credit-risk-model-stability/\"","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-02-25T02:30:19.998496Z","iopub.status.busy":"2024-02-25T02:30:19.997427Z","iopub.status.idle":"2024-02-25T02:30:24.136683Z","shell.execute_reply":"2024-02-25T02:30:24.135692Z"},"papermill":{"duration":4.151564,"end_time":"2024-02-25T02:30:24.139471","exception":false,"start_time":"2024-02-25T02:30:19.987907","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def to_pandas(df_data, cat_cols=None):\n    df_data = df_data.to_pandas()\n    \n    if cat_cols is None:\n        cat_cols = list(df_data.select_dtypes(\"object\").columns)\n    \n    df_data[cat_cols] = df_data[cat_cols].astype(\"category\")\n    \n    return df_data, cat_cols","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:30:24.158055Z","iopub.status.busy":"2024-02-25T02:30:24.157678Z","iopub.status.idle":"2024-02-25T02:30:24.163554Z","shell.execute_reply":"2024-02-25T02:30:24.162586Z"},"papermill":{"duration":0.017644,"end_time":"2024-02-25T02:30:24.165729","exception":false,"start_time":"2024-02-25T02:30:24.148085","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def set_table_dtypes(df):\n    for col in df.columns:\n        if col in [\"case_id\", \"WEEK_NUM\", \"num_group1\", \"num_group2\"]:\n            df = df.with_columns(pl.col(col).cast(pl.Int64))\n        elif col in [\"date_decision\"]:\n            df = df.with_columns(pl.col(col).cast(pl.Date))\n        elif col[-1] in (\"P\", \"A\"):\n            df = df.with_columns(pl.col(col).cast(pl.Float64))\n        elif col[-1] in (\"M\",):\n            df = df.with_columns(pl.col(col).cast(pl.String))\n        elif col[-1] in (\"D\",):\n            df = df.with_columns(pl.col(col).cast(pl.Date))            \n\n    return df\n\ndef convert_strings(df: pd.DataFrame) -> pd.DataFrame:\n    for col in df.columns:  \n        if df[col].dtype.name in ['object', 'string']:\n            df[col] = df[col].astype(\"string\").astype('category')\n            current_categories = df[col].cat.categories\n            new_categories = current_categories.to_list() + [\"Unknown\"]\n            new_dtype = pd.CategoricalDtype(categories=new_categories, ordered=True)\n            df[col] = df[col].astype(new_dtype)\n    return df","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:30:24.184051Z","iopub.status.busy":"2024-02-25T02:30:24.183278Z","iopub.status.idle":"2024-02-25T02:30:24.194875Z","shell.execute_reply":"2024-02-25T02:30:24.194028Z"},"papermill":{"duration":0.023054,"end_time":"2024-02-25T02:30:24.196972","exception":false,"start_time":"2024-02-25T02:30:24.173918","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Load the data","metadata":{"papermill":{"duration":0.007976,"end_time":"2024-02-25T02:30:24.213118","exception":false,"start_time":"2024-02-25T02:30:24.205142","status":"completed"},"tags":[]}},{"cell_type":"code","source":"train_basetable = pl.read_csv(dataPath + \"csv_files/train/train_base.csv\")\ntrain_static = pl.concat(\n    [\n        pl.read_csv(dataPath + \"csv_files/train/train_static_0_0.csv\").pipe(set_table_dtypes),\n        pl.read_csv(dataPath + \"csv_files/train/train_static_0_1.csv\").pipe(set_table_dtypes),\n    ],\n    how=\"vertical_relaxed\",\n)\ntrain_static_cb = pl.read_csv(dataPath + \"csv_files/train/train_static_cb_0.csv\").pipe(set_table_dtypes)\ntrain_debitcard_1 = pl.read_csv(dataPath + \"csv_files/train/train_debitcard_1.csv\").pipe(set_table_dtypes)\ntrain_applprev_1_0 = pl.read_csv(dataPath + \"csv_files/train/train_applprev_1_0.csv\").pipe(set_table_dtypes)\ntrain_applprev_1_1 = pl.read_csv(dataPath + \"csv_files/train/train_applprev_1_1.csv\").pipe(set_table_dtypes)\ntrain_person_1 = pl.read_csv(dataPath + \"csv_files/train/train_person_1.csv\").pipe(set_table_dtypes) \ntrain_credit_bureau_b_2 = pl.read_csv(dataPath + \"csv_files/train/train_credit_bureau_b_2.csv\").pipe(set_table_dtypes) ","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:30:24.231065Z","iopub.status.busy":"2024-02-25T02:30:24.230691Z","iopub.status.idle":"2024-02-25T02:31:00.501441Z","shell.execute_reply":"2024-02-25T02:31:00.500373Z"},"papermill":{"duration":36.282911,"end_time":"2024-02-25T02:31:00.504187","exception":false,"start_time":"2024-02-25T02:30:24.221276","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_basetable = pl.read_csv(dataPath + \"csv_files/test/test_base.csv\")\ntest_static = pl.concat(\n    [\n        pl.read_csv(dataPath + \"csv_files/test/test_static_0_0.csv\").pipe(set_table_dtypes),\n        pl.read_csv(dataPath + \"csv_files/test/test_static_0_1.csv\").pipe(set_table_dtypes),\n        pl.read_csv(dataPath + \"csv_files/test/test_static_0_2.csv\").pipe(set_table_dtypes),\n    ],\n    how=\"vertical_relaxed\",\n)\ntest_static_cb = pl.read_csv(dataPath + \"csv_files/test/test_static_cb_0.csv\").pipe(set_table_dtypes)\ntest_debitcard_1 = pl.read_csv(dataPath + \"csv_files/test/test_debitcard_1.csv\").pipe(set_table_dtypes)\ntest_applprev_1_0 = pl.read_csv(dataPath + \"csv_files/test/test_applprev_1_0.csv\").pipe(set_table_dtypes)\ntest_applprev_1_1 = pl.read_csv(dataPath + \"csv_files/test/test_applprev_1_1.csv\").pipe(set_table_dtypes)\ntest_person_1 = pl.read_csv(dataPath + \"csv_files/test/test_person_1.csv\").pipe(set_table_dtypes) \ntest_credit_bureau_b_2 = pl.read_csv(dataPath + \"csv_files/test/test_credit_bureau_b_2.csv\").pipe(set_table_dtypes) ","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:00.524568Z","iopub.status.busy":"2024-02-25T02:31:00.523835Z","iopub.status.idle":"2024-02-25T02:31:00.622126Z","shell.execute_reply":"2024-02-25T02:31:00.620985Z"},"papermill":{"duration":0.112203,"end_time":"2024-02-25T02:31:00.624723","exception":false,"start_time":"2024-02-25T02:31:00.512520","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Data Preprocessing\nThe `train_applprev_1_*` datasets have a lot of rows, aggregating features will save a lot of memory.","metadata":{"papermill":{"duration":0.008039,"end_time":"2024-02-25T02:31:00.640937","exception":false,"start_time":"2024-02-25T02:31:00.632898","status":"completed"},"tags":[]}},{"cell_type":"code","source":"train_applprev_1_0_feats_1 = train_applprev_1_0.group_by(\"case_id\").agg(\n    pl.col(\"outstandingdebt_522A\").max().alias(\"outstandingdebt_522A_max\"))\ntrain_applprev_1_1_feats_1 = train_applprev_1_1.group_by(\"case_id\").agg(\n    pl.col(\"outstandingdebt_522A\").max().alias(\"outstandingdebt_522A_max\"))\ntrain_applprev_1 = pl.concat([train_applprev_1_0_feats_1,train_applprev_1_1_feats_1])","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:00.658614Z","iopub.status.busy":"2024-02-25T02:31:00.658219Z","iopub.status.idle":"2024-02-25T02:31:02.200508Z","shell.execute_reply":"2024-02-25T02:31:02.199590Z"},"papermill":{"duration":1.554112,"end_time":"2024-02-25T02:31:02.203199","exception":false,"start_time":"2024-02-25T02:31:00.649087","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_applprev_1_0_feats_1 = test_applprev_1_0.group_by(\"case_id\").agg(\n    pl.col(\"outstandingdebt_522A\").max().alias(\"outstandingdebt_522A_max\"))\ntest_applprev_1_1_feats_1 = test_applprev_1_1.group_by(\"case_id\").agg(\n    pl.col(\"outstandingdebt_522A\").max().alias(\"outstandingdebt_522A_max\"))\ntest_applprev_1 = pl.concat([test_applprev_1_0_feats_1,test_applprev_1_1_feats_1])","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:02.222110Z","iopub.status.busy":"2024-02-25T02:31:02.221250Z","iopub.status.idle":"2024-02-25T02:31:02.229242Z","shell.execute_reply":"2024-02-25T02:31:02.228323Z"},"papermill":{"duration":0.019883,"end_time":"2024-02-25T02:31:02.231643","exception":false,"start_time":"2024-02-25T02:31:02.211760","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Feature Engineering","metadata":{"papermill":{"duration":0.008905,"end_time":"2024-02-25T02:31:02.248852","exception":false,"start_time":"2024-02-25T02:31:02.239947","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We need to use aggregation functions in tables with depth > 1, so tables that contain num_group1 column or \n# also num_group2 column.\n\n## debit card\ntrain_debitcard_1_feats_1 = train_debitcard_1.group_by(\"case_id\").agg(\n    pl.col(\"last180dayaveragebalance_704A\").max().alias(\"last180dayaveragebalance_704A_max\")\n)\n\n#Here num_group1=0 has special meaning, it is the person who applied for the loan.\ntrain_debitcard_1_feats_2 = train_debitcard_1.select([\"case_id\", \"num_group1\", \"last180dayaveragebalance_704A\"]).filter(\n    pl.col(\"num_group1\") == 0\n).drop(\"num_group1\").rename({\"last180dayaveragebalance_704A\": \"person_averagebalance\"})\n\n\n## person\ntrain_person_1_feats_1 = train_person_1.group_by(\"case_id\").agg(\n    pl.col(\"mainoccupationinc_384A\").max().alias(\"mainoccupationinc_384A_max\"),\n    (pl.col(\"incometype_1044T\") == \"SELFEMPLOYED\").max().alias(\"mainoccupationinc_384A_any_selfemployed\")\n)\n\n# Here num_group1=0 has special meaning, it is the person who applied for the loan.\ntrain_person_1_feats_2 = train_person_1.select([\"case_id\", \"num_group1\", \"housetype_905L\"]).filter(\n    pl.col(\"num_group1\") == 0\n).drop(\"num_group1\").rename({\"housetype_905L\": \"person_housetype\"})\n\n\n# Here we have num_group1 and num_group2, so we need to aggregate again.\ntrain_credit_bureau_b_2_feats = train_credit_bureau_b_2.group_by(\"case_id\").agg(\n    pl.col(\"pmts_pmtsoverdue_635A\").max().alias(\"pmts_pmtsoverdue_635A_max\"),\n    (pl.col(\"pmts_dpdvalue_108P\") > 31).max().alias(\"pmts_dpdvalue_108P_over31\")\n)\n\n# We will process in this examples only A-type and M-type columns, so we need to select them.\nselected_static_cols = []\nfor col in train_static.columns:\n    if col[-1] in (\"A\", \"M\", \"P\"):\n        selected_static_cols.append(col)\nprint(selected_static_cols)\n\nselected_static_cb_cols = []\nfor col in train_static_cb.columns:\n    if col[-1] in (\"A\", \"M\", \"P\"):\n        selected_static_cb_cols.append(col)\nprint(selected_static_cb_cols)","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:02.266986Z","iopub.status.busy":"2024-02-25T02:31:02.266215Z","iopub.status.idle":"2024-02-25T02:31:03.166801Z","shell.execute_reply":"2024-02-25T02:31:03.165718Z"},"papermill":{"duration":0.912728,"end_time":"2024-02-25T02:31:03.169598","exception":false,"start_time":"2024-02-25T02:31:02.256870","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Join all tables together.\ndata = train_basetable.join(\n    train_static.select([\"case_id\"]+selected_static_cols), how=\"left\", on=\"case_id\"\n).join(\n    train_static_cb.select([\"case_id\"]+selected_static_cb_cols), how=\"left\", on=\"case_id\"\n).join(\n    train_debitcard_1_feats_1, how=\"left\", on=\"case_id\"\n).join(\n    train_debitcard_1_feats_2, how=\"left\", on=\"case_id\"\n).join(\n    train_applprev_1_0_feats_1, how=\"left\", on=\"case_id\"\n).join(\n    train_applprev_1_1_feats_1, how=\"left\", on=\"case_id\"\n).join(\n    train_person_1_feats_1, how=\"left\", on=\"case_id\"    \n).join(\n    train_person_1_feats_2, how=\"left\", on=\"case_id\"\n).join(\n    train_credit_bureau_b_2_feats, how=\"left\", on=\"case_id\"\n)","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:03.188081Z","iopub.status.busy":"2024-02-25T02:31:03.187424Z","iopub.status.idle":"2024-02-25T02:31:04.927782Z","shell.execute_reply":"2024-02-25T02:31:04.926935Z"},"papermill":{"duration":1.752601,"end_time":"2024-02-25T02:31:04.930435","exception":false,"start_time":"2024-02-25T02:31:03.177834","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_debitcard_1_feats_1 = test_debitcard_1.group_by(\"case_id\").agg(\n    pl.col(\"last180dayaveragebalance_704A\").max().alias(\"last180dayaveragebalance_704A_max\")\n)\n\ntest_debitcard_1_feats_2 = test_debitcard_1.select([\"case_id\", \"num_group1\", \"last180dayaveragebalance_704A\"]).filter(\n    pl.col(\"num_group1\") == 0\n).drop(\"num_group1\").rename({\"last180dayaveragebalance_704A\": \"person_averagebalance\"})\n\n\ntest_person_1_feats_1 = test_person_1.group_by(\"case_id\").agg(\n    pl.col(\"mainoccupationinc_384A\").max().alias(\"mainoccupationinc_384A_max\"),\n    (pl.col(\"incometype_1044T\") == \"SELFEMPLOYED\").max().alias(\"mainoccupationinc_384A_any_selfemployed\")\n)\n\ntest_person_1_feats_2 = test_person_1.select([\"case_id\", \"num_group1\", \"housetype_905L\"]).filter(\n    pl.col(\"num_group1\") == 0\n).drop(\"num_group1\").rename({\"housetype_905L\": \"person_housetype\"})\n\n\ntest_credit_bureau_b_2_feats = test_credit_bureau_b_2.group_by(\"case_id\").agg(\n    pl.col(\"pmts_pmtsoverdue_635A\").max().alias(\"pmts_pmtsoverdue_635A_max\"),\n    (pl.col(\"pmts_dpdvalue_108P\") > 31).max().alias(\"pmts_dpdvalue_108P_over31\")\n)\n\ndata_submission = test_basetable.join(\n    test_static.select([\"case_id\"]+selected_static_cols), how=\"left\", on=\"case_id\"\n).join(\n    test_static_cb.select([\"case_id\"]+selected_static_cb_cols), how=\"left\", on=\"case_id\"\n).join(\n    test_debitcard_1_feats_1, how=\"left\", on=\"case_id\"\n).join(\n    test_debitcard_1_feats_2, how=\"left\", on=\"case_id\"\n).join(\n    test_applprev_1_0_feats_1, how=\"left\", on=\"case_id\"\n).join(\n    test_applprev_1_1_feats_1, how=\"left\", on=\"case_id\"\n).join(\n    test_person_1_feats_1, how=\"left\", on=\"case_id\"\n).join(\n    test_person_1_feats_2, how=\"left\", on=\"case_id\"\n).join(\n    test_credit_bureau_b_2_feats, how=\"left\", on=\"case_id\"\n)","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:04.948494Z","iopub.status.busy":"2024-02-25T02:31:04.948094Z","iopub.status.idle":"2024-02-25T02:31:04.967545Z","shell.execute_reply":"2024-02-25T02:31:04.966378Z"},"papermill":{"duration":0.031484,"end_time":"2024-02-25T02:31:04.970211","exception":false,"start_time":"2024-02-25T02:31:04.938727","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"case_ids = data[\"case_id\"].unique().shuffle(seed=1)\ncase_ids_train, case_ids_test = train_test_split(case_ids, train_size=0.6, random_state=1)\ncase_ids_valid, case_ids_test = train_test_split(case_ids_test, train_size=0.5, random_state=1)\n\ncols_pred = []\nfor col in data.columns:\n    if col[-1].isupper() and col[:-1].islower():\n        cols_pred.append(col)\n\nprint(cols_pred)\n\ndef from_polars_to_pandas(case_ids: pl.DataFrame) -> pl.DataFrame:\n    return (\n        data.filter(pl.col(\"case_id\").is_in(case_ids))[[\"case_id\", \"WEEK_NUM\", \"target\"]].to_pandas(),\n        data.filter(pl.col(\"case_id\").is_in(case_ids))[cols_pred].to_pandas(),\n        data.filter(pl.col(\"case_id\").is_in(case_ids))[\"target\"].to_pandas()\n    )\n\nbase_train, X_train, y_train = from_polars_to_pandas(case_ids_train)\nbase_valid, X_valid, y_valid = from_polars_to_pandas(case_ids_valid)\nbase_test, X_test, y_test = from_polars_to_pandas(case_ids_test)\n\nfor df in [X_train, X_valid, X_test]:\n    df = convert_strings(df)\n    datetime_cols = df.select_dtypes(include = ['datetime']).columns\n    df = df.drop(columns = datetime_cols, inplace = True)","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:04.988462Z","iopub.status.busy":"2024-02-25T02:31:04.987835Z","iopub.status.idle":"2024-02-25T02:31:14.570046Z","shell.execute_reply":"2024-02-25T02:31:14.568808Z"},"papermill":{"duration":9.594557,"end_time":"2024-02-25T02:31:14.572936","exception":false,"start_time":"2024-02-25T02:31:04.978379","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"Train: {X_train.shape}\")\nprint(f\"Valid: {X_valid.shape}\")\nprint(f\"Test: {X_test.shape}\")","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:14.593820Z","iopub.status.busy":"2024-02-25T02:31:14.593423Z","iopub.status.idle":"2024-02-25T02:31:14.599447Z","shell.execute_reply":"2024-02-25T02:31:14.598587Z"},"papermill":{"duration":0.018371,"end_time":"2024-02-25T02:31:14.601901","exception":false,"start_time":"2024-02-25T02:31:14.583530","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Training LightGBM","metadata":{"papermill":{"duration":0.008194,"end_time":"2024-02-25T02:31:14.618478","exception":false,"start_time":"2024-02-25T02:31:14.610284","status":"completed"},"tags":[]}},{"cell_type":"code","source":"lgb_train = lgb.Dataset(X_train, label=y_train)\nlgb_valid = lgb.Dataset(X_valid, label=y_valid, reference=lgb_train)\n\n#BEST_PARAMS = dict((bayes_cv_tuner.best_params_))\nBEST_PARAMS = {'max_bin': 262,\n              'max_depth': 2,\n              'min_child_samples':5,\n              'reg_alpha': 1,\n              'reg_lamda': 5}\n\nFIXED_PARAMS={'boosting_type' : 'gbdt',\n              'objective': 'binary',\n              'metric': 'auc',\n              'is_unbalance': True,\n              'num_leaves' : 31,\n              'learning_rate' : 0.05,\n              'n_estimators': 1000,\n              'colsample_bytree': 0.7,\n              'colsample_bynode': 0.9,\n              'verbose': -1,\n              'random_state': 32,\n              'early_stopping_rounds': 100,\n              'extra_tree' : True}\nparams = {**FIXED_PARAMS, **BEST_PARAMS}\nparams\n\n\ngbm = lgb.train(\n    params,\n    lgb_train,\n    valid_sets=lgb_valid,\n    callbacks=[lgb.log_evaluation(50), lgb.early_stopping(10)]\n)","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:31:14.637850Z","iopub.status.busy":"2024-02-25T02:31:14.637455Z","iopub.status.idle":"2024-02-25T02:32:47.407689Z","shell.execute_reply":"2024-02-25T02:32:47.406394Z"},"papermill":{"duration":92.783087,"end_time":"2024-02-25T02:32:47.410126","exception":false,"start_time":"2024-02-25T02:31:14.627039","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for base, X in [(base_train, X_train), (base_valid, X_valid), (base_test, X_test)]:\n    y_pred = gbm.predict(X, num_iteration=gbm.best_iteration)\n    base[\"score\"] = y_pred\n\nprint(f'The AUC score on the train set is: {roc_auc_score(base_train[\"target\"], base_train[\"score\"])}') \nprint(f'The AUC score on the valid set is: {roc_auc_score(base_valid[\"target\"], base_valid[\"score\"])}') \nprint(f'The AUC score on the test set is: {roc_auc_score(base_test[\"target\"], base_test[\"score\"])}') ","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:32:47.432041Z","iopub.status.busy":"2024-02-25T02:32:47.431264Z","iopub.status.idle":"2024-02-25T02:33:05.604424Z","shell.execute_reply":"2024-02-25T02:33:05.602902Z"},"papermill":{"duration":18.186692,"end_time":"2024-02-25T02:33:05.606758","exception":false,"start_time":"2024-02-25T02:32:47.420066","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def gini_stability(base, w_fallingrate=88.0, w_resstd=-0.5):\n    gini_in_time = base.loc[:, [\"WEEK_NUM\", \"target\", \"score\"]]\\\n        .sort_values(\"WEEK_NUM\")\\\n        .groupby(\"WEEK_NUM\")[[\"target\", \"score\"]]\\\n        .apply(lambda x: 2*roc_auc_score(x[\"target\"], x[\"score\"])-1).tolist()\n    \n    x = np.arange(len(gini_in_time))\n    y = gini_in_time\n    a, b = np.polyfit(x, y, 1)\n    y_hat = a*x + b\n    residuals = y - y_hat\n    res_std = np.std(residuals)\n    avg_gini = np.mean(gini_in_time)\n    return avg_gini + w_fallingrate * min(0, a) + w_resstd * res_std\n\nstability_score_train = gini_stability(base_train)\nstability_score_valid = gini_stability(base_valid)\nstability_score_test = gini_stability(base_test)\n\nprint(f'The stability score on the train set is: {stability_score_train}') \nprint(f'The stability score on the valid set is: {stability_score_valid}') \nprint(f'The stability score on the test set is: {stability_score_test}')  ","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:33:05.629390Z","iopub.status.busy":"2024-02-25T02:33:05.628967Z","iopub.status.idle":"2024-02-25T02:33:06.758967Z","shell.execute_reply":"2024-02-25T02:33:06.757620Z"},"papermill":{"duration":1.144061,"end_time":"2024-02-25T02:33:06.761280","exception":false,"start_time":"2024-02-25T02:33:05.617219","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Submission","metadata":{"papermill":{"duration":0.009976,"end_time":"2024-02-25T02:33:06.781599","exception":false,"start_time":"2024-02-25T02:33:06.771623","status":"completed"},"tags":[]}},{"cell_type":"code","source":"X_submission = data_submission[cols_pred].to_pandas()\nX_submission = convert_strings(X_submission)\ncategorical_cols = X_train.select_dtypes(include=['category']).columns\n\nfor col in categorical_cols:\n    train_categories = set(X_train[col].cat.categories)\n    submission_categories = set(X_submission[col].cat.categories)\n    new_categories = submission_categories - train_categories\n    X_submission.loc[X_submission[col].isin(new_categories), col] = \"Unknown\"\n    new_dtype = pd.CategoricalDtype(categories=train_categories, ordered=True)\n    X_train[col] = X_train[col].astype(new_dtype)\n    X_submission[col] = X_submission[col].astype(new_dtype)\n\ny_submission_pred = gbm.predict(X_submission, num_iteration=gbm.best_iteration)","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:33:06.804396Z","iopub.status.busy":"2024-02-25T02:33:06.803248Z","iopub.status.idle":"2024-02-25T02:33:06.902289Z","shell.execute_reply":"2024-02-25T02:33:06.901350Z"},"papermill":{"duration":0.113149,"end_time":"2024-02-25T02:33:06.904918","exception":false,"start_time":"2024-02-25T02:33:06.791769","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({\n    \"case_id\": data_submission[\"case_id\"].to_numpy(),\n    \"score\": y_submission_pred\n}).set_index('case_id')\nsubmission.to_csv(\"./submission.csv\")","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:33:06.928149Z","iopub.status.busy":"2024-02-25T02:33:06.927137Z","iopub.status.idle":"2024-02-25T02:33:06.937783Z","shell.execute_reply":"2024-02-25T02:33:06.936751Z"},"papermill":{"duration":0.02511,"end_time":"2024-02-25T02:33:06.940584","exception":false,"start_time":"2024-02-25T02:33:06.915474","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission","metadata":{"execution":{"iopub.execute_input":"2024-02-25T02:33:06.962991Z","iopub.status.busy":"2024-02-25T02:33:06.962583Z","iopub.status.idle":"2024-02-25T02:33:06.977039Z","shell.execute_reply":"2024-02-25T02:33:06.976046Z"},"papermill":{"duration":0.027946,"end_time":"2024-02-25T02:33:06.979147","exception":false,"start_time":"2024-02-25T02:33:06.951201","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"papermill":{"duration":0.010165,"end_time":"2024-02-25T02:33:07.000082","exception":false,"start_time":"2024-02-25T02:33:06.989917","status":"completed"},"tags":[]},"execution_count":null,"outputs":[]}]}